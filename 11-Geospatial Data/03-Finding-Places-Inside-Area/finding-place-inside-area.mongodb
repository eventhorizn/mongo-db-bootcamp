// Adding Additional Locations
// In order to find point in area

db.places.insertOne({name: "Conservatory of Flowers", 
    location: {type: "Point", coordinates: [-122.4615748, 37.7701756]}});

db.places.insertOne({name: "Golden Gate Park Tennis Courts",
    location: {type: "Point", coordinates: [-122.4593702, 37.7705046]}});

db.places.insertOne({name: "Nopa",
    location: {type: "Point", coordinates: [-122.4389058, 37.7747415]}});

db.places.find();

// Defining Area
const p1 = [-122.4547, 37.77473];
const p2 = [-122.45303, 37.76641];
const p3 = [-122.51026, 37.76411];
const p4 = [-122.51088, 37.77131];

db.places.find({location: 
    {$geoWithin: {$geometry: 
        {type: "Polygon", coordinates: [[p1, p2, p3, p4, p1]]}}}});


// Find if a user is in an area 
// Neighborhoods in a city, which neighborhood is user in?
const p1 = [-122.4547, 37.77473];
const p2 = [-122.45303, 37.76641];
const p3 = [-122.51026, 37.76411];
const p4 = [-122.51088, 37.77131];

db.areas.insertOne({name: "Golden Gate Park", 
    area: {type: "Polygon", coordinates: [[p1, p2, p3, p4, p1]]}});
db.areas.find();


db.areas.createIndex({area: "2dsphere"});


// Does this point intersect w/ this area?
// Yes
db.areas.find({area: {$geoIntersects: 
    {$geometry: {type: "Point", coordinates: [-122.49089, 37.76992]}}}});

// No
db.areas.find({area: {$geoIntersects: 
    {$geometry: {type: "Point", coordinates: [-122.48446, 37.77776]}}}});


// Finding Places Within Certain Radius
// $centerSphere, first is center of sphere, second is radians distance
// for radians, we simply converted from miles to radians
db.places.find({location: 
    {$geoWithin: {$centerSphere: [[-122.46203, 37.77286], 1 / 6378.1]}}});


