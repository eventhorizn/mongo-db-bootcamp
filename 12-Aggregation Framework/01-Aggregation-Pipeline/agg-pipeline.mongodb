// Aggregation Pipeline

// Need to add the persons data first
// mongoimport persons.json -d persons -c contacts --jsonArray --drop
// run in shell

// aggregate can take advantage of indexes
// also uses a cursor
// Simple aggregate with just match (same as find)
db.persons.aggregate([
    {$match: {gender: "female"}}
]);

// Group to merge documents, a way to find how many in a location.state
db.persons.aggregate([
    {$match: {gender: "female"}},
    {$group: {_id: {state: "$location.state"}, totalPersons: {$sum: 1}}}
]);

// Sorting
db.persons.aggregate([
    {$match: {gender: "female"}},
    {$group: {_id: {state: "$location.state"}, totalPersons: {$sum: 1}}},
    {$sort: {totalPersons: -1}}
]);


// $project (really the select on sql)
// jfc this shit...to get the first letter capitalized
db.persons.aggregate([
    {
      $project: {
        _id: 0,
        gender: 1,
        fullName: {
          $concat: [
            { $toUpper: { $substrCP: ['$name.first', 0, 1] } },
            {
              $substrCP: [
                '$name.first',
                1,
                { $subtract: [{ $strLenCP: '$name.first' }, 1] }
              ]
            },
            ' ',
            { $toUpper: { $substrCP: ['$name.last', 0, 1] } },
            {
              $substrCP: [
                '$name.last',
                1,
                { $subtract: [{ $strLenCP: '$name.last' }, 1] }
              ]
            }
          ]
        }
      }
    }
  ]);



// Turning Location into a geoJSON Object
// If you look at location, it has a coordinates field
// Also gonna flatten some fields
// You can have multiple project lines
db.persons.aggregate([
    { 
      $project: { 
        _id: 0, 
        name: 1, 
        email: 1, 
        location: { 
          type: "Point", 
          coordinates: [
            { 
              $convert: { 
                input: "$location.coordinates.longitude", 
                to: "double", 
                onError: 0.0, 
                onNull: 0.0 
              }
            }, 
            { 
              $convert: { 
                input: "$location.coordinates.latitude", 
                to: "double", 
                onError: 0.0, 
                onNull: 0.0 
              }
            }
          ]
        }
      }
    },
    {
      $project: {
        _id: 0,
        gender: 1,
        email: 1,
        location: 1,
        fullName: {
          $concat: [
            { $toUpper: { $substrCP: ['$name.first', 0, 1] } },
            {
              $substrCP: [
                '$name.first',
                1,
                { $subtract: [{ $strLenCP: '$name.first' }, 1] }
              ]
            },
            ' ',
            { $toUpper: { $substrCP: ['$name.last', 0, 1] } },
            {
              $substrCP: [
                '$name.last',
                1,
                { $subtract: [{ $strLenCP: '$name.last' }, 1] }
              ]
            }
          ]
        }
      }
    }
  ]);


  // Transforming Birthdate
  db.persons.aggregate([
    { 
      $project: { 
        _id: 0, 
        name: 1, 
        email: 1,
        birthdate: { $convert: { input: "$dob.date", to: "date" } },
        age: "$dob.age",
        location: { 
          type: "Point", 
          coordinates: [
            { 
              $convert: { 
                input: "$location.coordinates.longitude", 
                to: "double", 
                onError: 0.0, 
                onNull: 0.0 
              }
            }, 
            { 
              $convert: { 
                input: "$location.coordinates.latitude", 
                to: "double", 
                onError: 0.0, 
                onNull: 0.0 
              }
            }
          ]
        }
      }
    },
    {
      $project: {
        _id: 0,
        gender: 1,
        email: 1,
        location: 1,
        birthdate: 1,
        age: 1,
        fullName: {
          $concat: [
            { $toUpper: { $substrCP: ['$name.first', 0, 1] } },
            {
              $substrCP: [
                '$name.first',
                1,
                { $subtract: [{ $strLenCP: '$name.first' }, 1] }
              ]
            },
            ' ',
            { $toUpper: { $substrCP: ['$name.last', 0, 1] } },
            {
              $substrCP: [
                '$name.last',
                1,
                { $subtract: [{ $strLenCP: '$name.last' }, 1] }
              ]
            }
          ]
        }
      }
    }
  ]);


// Transformation Shortcuts
// If you don't have OnError and OnNull
db.persons.aggregate([
  { 
    $project: { 
      _id: 0, 
      name: 1, 
      email: 1,
      birthdate: { $toDate: "$dob.date" },
      age: "$dob.age",
      location: { 
        type: "Point", 
        coordinates: [
          { 
            $convert: { 
              input: "$location.coordinates.longitude", 
              to: "double", 
              onError: 0.0, 
              onNull: 0.0 
            }
          }, 
          { 
            $convert: { 
              input: "$location.coordinates.latitude", 
              to: "double", 
              onError: 0.0, 
              onNull: 0.0 
            }
          }
        ]
      }
    }
  },
  {
    $project: {
      _id: 0,
      gender: 1,
      email: 1,
      location: 1,
      birthdate: 1,
      age: 1,
      fullName: {
        $concat: [
          { $toUpper: { $substrCP: ['$name.first', 0, 1] } },
          {
            $substrCP: [
              '$name.first',
              1,
              { $subtract: [{ $strLenCP: '$name.first' }, 1] }
            ]
          },
          ' ',
          { $toUpper: { $substrCP: ['$name.last', 0, 1] } },
          {
            $substrCP: [
              '$name.last',
              1,
              { $subtract: [{ $strLenCP: '$name.last' }, 1] }
            ]
          }
        ]
      }
    }
  }
]);


// Understanding $isoWeekYear Operator
// We want to group on birthdate
db.persons.aggregate([
  { 
    $project: { 
      _id: 0, 
      name: 1, 
      email: 1,
      birthdate: { $toDate: "$dob.date" },
      age: "$dob.age",
      location: { 
        type: "Point", 
        coordinates: [
          { 
            $convert: { 
              input: "$location.coordinates.longitude", 
              to: "double", 
              onError: 0.0, 
              onNull: 0.0 
            }
          }, 
          { 
            $convert: { 
              input: "$location.coordinates.latitude", 
              to: "double", 
              onError: 0.0, 
              onNull: 0.0 
            }
          }
        ]
      }
    }
  },
  {
    $project: {
      _id: 0,
      gender: 1,
      email: 1,
      location: 1,
      birthdate: 1,
      age: 1,
      fullName: {
        $concat: [
          { $toUpper: { $substrCP: ['$name.first', 0, 1] } },
          {
            $substrCP: [
              '$name.first',
              1,
              { $subtract: [{ $strLenCP: '$name.first' }, 1] }
            ]
          },
          ' ',
          { $toUpper: { $substrCP: ['$name.last', 0, 1] } },
          {
            $substrCP: [
              '$name.last',
              1,
              { $subtract: [{ $strLenCP: '$name.last' }, 1] }
            ]
          }
        ]
      }
    }
  },
  { $group: { _id: { birthYear: { $isoWeekYear: "$birthdate" } }, numPersons: { $sum: 1 } } },
  { $sort: { numPersons: -1 } }
]);




// Understanding $bucket
// 3 Buckets are returned since we don't have anyone
// younger than 18 or older than 50
// So you can finetune the boundaries
db.persons.aggregate([
  { 
    $bucket: { 
      groupBy: "$dob.age", 
      boundaries: [0, 18, 30, 50, 80, 120], 
      output: {
        numPersons: { $sum: 1},
        averageAge: { $avg: "$dob.age"}
      } 
    } 
  }
]);

// Alternate way to run
// MongoDB will auto create buckets and distribute equally
db.persons.aggregate([
  { 
    $bucketAuto: {
      groupBy: "$dob.age",
      buckets: 5,
      output: {
        numPersons: { $sum: 1},
        averageAge: { $avg: "$dob.age"}
      }
    } 
  }
]);



// Diving into Additional Stages
// $limit, $skip
// Order is important!
db.persons.aggregate([
  { $project: { _id: 0, name: { $concat: ["$name.first", " ", "$name.last"] }, birthdate: { $toDate: "$dob.date" } } },
  { $sort: { birthdate: 1 } },
  { $skip: 10 },
  { $limit: 10 }
]);

// Completely different set of people
db.persons.aggregate([
  { $project: { _id: 0, name: { $concat: ["$name.first", " ", "$name.last"] }, birthdate: { $toDate: "$dob.date" } } },
  { $skip: 10 },
  { $limit: 10 },
  { $sort: { birthdate: 1 } }
]);




// Writing Pipeline Results into a New Collection
// $out
db.persons.aggregate([
  {
    $project: {
      _id: 0,
      name: 1,
      email: 1,
      birthdate: { $toDate: '$dob.date' },
      age: "$dob.age",
      location: {
        type: 'Point',
        coordinates: [
          {
            $convert: {
              input: '$location.coordinates.longitude',
              to: 'double',
              onError: 0.0,
              onNull: 0.0
            }
          },
          {
            $convert: {
              input: '$location.coordinates.latitude',
              to: 'double',
              onError: 0.0,
              onNull: 0.0
            }
          }
        ]
      }
    }
  },
  {
    $project: {
      gender: 1,
      email: 1,
      location: 1,
      birthdate: 1,
      age: 1,
      fullName: {
        $concat: [
          { $toUpper: { $substrCP: ['$name.first', 0, 1] } },
          {
            $substrCP: [
              '$name.first',
              1,
              { $subtract: [{ $strLenCP: '$name.first' }, 1] }
            ]
          },
          ' ',
          { $toUpper: { $substrCP: ['$name.last', 0, 1] } },
          {
            $substrCP: [
              '$name.last',
              1,
              { $subtract: [{ $strLenCP: '$name.last' }, 1] }
            ]
          }
        ]
      }
    }
  },
  { $out: "transformedPersons" }
]);

db.transformedPersons.find();



// Working with $geoNear Stage
// Using new collection
db.transfomredPersons.createIndex({location: "2dsphere"});

// $geoNear has to be the first element in the pipeline
// Maybe read some notes on $geoNear, it's changed a bit
db.transfomredPersons.aggregate([
  { 
    $geoNear: {
      near: {
        type: "Point", 
        coordinates: [-18.4, -42.8]
      },
      maxDistance: 1000000,
      query: { age: { $gt: 30 } },
      distanceField: "distance"
    }
  }
]);



