// Arrays and Aggregation

// Creating collection w/ arrays
db.friends.insertMany([
    {
        "name": "Max",
        "hobbies": ["Sports", "Cooking"],
        "age": 29,
        "examScores": [
            { "difficulty": 4, "score": 57.9 },
            { "difficulty": 6, "score": 62.1 },
            { "difficulty": 3, "score": 88.5 }
        ]
    },
    {
        "name": "Manu",
        "hobbies": ["Eating", "Data Analytics"],
        "age": 30,
        "examScores": [
            { "difficulty": 7, "score": 52.1 },
            { "difficulty": 2, "score": 74.3 },
            { "difficulty": 5, "score": 53.1 }
        ]
    },
    {
        "name": "Maria",
        "hobbies": ["Cooking", "Skiing"],
        "age": 29,
        "examScores": [
            { "difficulty": 3, "score": 75.1 },
            { "difficulty": 8, "score": 44.2 },
            { "difficulty": 6, "score": 61.5 }
        ]
    }
]);

// Pushing Elements to Newly Created Arrays

// Combine arrays w/ grouping
// This creates an array of arrays
db.friends.aggregate([
    { $group: { _id: { age: "$age" }, allHobbies: { $push: "$hobbies" } } }
]);

// What if we want to pull the values out of all arrays and make a new one?
// Understanding the $unwind Stage

// 2 ways to use it

// Way 1
// Flattens the array, and creates new domemnts for each item
db.friends.aggregate([
    { $unwind: "$hobbies" }
]);

// Way 2
// Keep the group to combine all into an array for each age
// You'll notice we have duplicate values
db.friends.aggregate([
    { $unwind: "$hobbies" },
    { $group: { _id: { age: "$age" }, allHobbies: { $push: "$hobbies" } } }
]);


// Removing duplicate values
// Simply use $addToSet
db.friends.aggregate([
    { $unwind: "$hobbies" },
    { $group: { _id: { age: "$age" }, allHobbies: { $addToSet: "$hobbies" } } }
]);


// Using Projection with Arrays
// $slice gets you a subset of an array
// This get's you the first exam score for each document
db.friends.aggregate([
    { $project: {_id: 0, examScore: { $slice:  ["$examScores", 1]}} }
]);

// Gets last 2
db.friends.aggregate([
    { $project: {_id: 0, examScore: { $slice:  ["$examScores", -2]}} }
]);

// Start at pos 2, give me 1 element
db.friends.aggregate([
    { $project: {_id: 0, examScore: { $slice:  ["$examScores", 2, 1]}} }
]);



// Getting Length of Array
db.friends.aggregate([
    { $project: { _id: 0, numScores: { $size:  "$examScores" } } }
]);


// Using the Filter Operator
// Lets say we want to find scores higher than 60
db.friends.aggregate([
    { 
        $project: { 
            _id: 0, 
            scores: { $filter: { input: "$examScores", as: "sc", cond: { $gt: ["$$sc.score", 60] } } } 
        } 
    }
]);



// Applying Multiple Operations to an Array
// We want to output the highest exam score for each document
db.friends.aggregate([
    { $unwind: "$examScores" },
    { $project: { _id: 1, name: 1, age: 1, score: "$examScores.score" } },
    { $sort: { examScores: -1 } },
    { $group: { _id: "$_id", name: { $first: "$name" }, maxScore: { $max: "$score" } } },
    { $sort: { maxScore:  -1} }
]);

